digraph calltree {

  Job_worker -> FractalJob_work;
  Job_worker[label="Job::worker\n(Thread queue worker function)"];

  FractalJob_work -> FractalJob_sisd_work;
  FractalJob_work -> FractalJob_simd_work;
  FractalJob_work[label="FractalJob::work"];

  FractalJob_sisd_work -> MandelbrotJob_sisd_calculate;
  FractalJob_sisd_work -> JuliaJob_sisd_calculate;
  FractalJob_sisd_work[label="FractalJob::sisd_work\nEdge optimization here"];
  # The design is wrong; edge optimization should be in FractalJob::work.

  FractalJob_simd_work -> MandelbrotJob_simd_calculate;
  FractalJob_simd_work -> JuliaJob_simd_calculate;
  FractalJob_simd_work[label="FractalJob::simd_work\nSecond copy of edge optimization here"];

  MandelbrotJob_sisd_calculate -> iterate;
  MandelbrotJob_sisd_calculate[label="MandelbrotJob::sisd_calculate\nRegion optimizations are currently here"];

  MandelbrotJob_simd_calculate -> simd_iterate;
  MandelbrotJob_simd_calculate[label="MandelbrotJob::simd_calculate\nAlways calculates 4 points."];

  JuliaJob_sisd_calculate -> iterate;
  JuliaJob_sisd_calculate[label="JuliaJob::sisd_calculate\nNo region optimizations for Julia sets"];

  JuliaJob_simd_calculate -> simd_iterate;
  JuliaJob_simd_calculate[label="JuliaJob::simd_calculate\nAlways calculates 4 points."];

  simd_iterate -> simd_iterate_core;
  simd_iterate[label="simd_iterate\nAlways calculates 4 points."];

  simd_iterate_core[label="simd_iterate_core\nSecond copy of region optimizations here"];
  
}